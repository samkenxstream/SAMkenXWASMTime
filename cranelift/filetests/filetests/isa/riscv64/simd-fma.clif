test compile precise-output
set unwind_info=false
target riscv64 has_v

function %fma_f64x2(f64x2, f64x2, f64x2) -> f64x2 {
block0(v0: f64x2, v1: f64x2, v2: f64x2):
    v3 = fma v0, v1, v2
    return v3
}

; VCode:
;   add sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
; block0:
;   vle8.v v1,16(fp) #avl=16, #vtype=(e8, m1, ta, ma)
;   vle8.v v3,32(fp) #avl=16, #vtype=(e8, m1, ta, ma)
;   vle8.v v7,48(fp) #avl=16, #vtype=(e8, m1, ta, ma)
;   vfmacc.vv v7,v3,v1 #avl=2, #vtype=(e64, m1, ta, ma)
;   vse8.v v7,0(a0) #avl=16, #vtype=(e8, m1, ta, ma)
;   ld ra,8(sp)
;   ld fp,0(sp)
;   add sp,+16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi sp, sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   ori s0, sp, 0
; block1: ; offset 0x10
;   .byte 0x57, 0x70, 0x08, 0xcc
;   addi t6, s0, 0x10
;   .byte 0x87, 0x80, 0x0f, 0x02
;   addi t6, s0, 0x20
;   .byte 0x87, 0x81, 0x0f, 0x02
;   addi t6, s0, 0x30
;   .byte 0x87, 0x83, 0x0f, 0x02
;   .byte 0x57, 0x70, 0x81, 0xcd
;   .byte 0xd7, 0x93, 0x30, 0xb2
;   .byte 0x57, 0x70, 0x08, 0xcc
;   .byte 0xa7, 0x03, 0x05, 0x02
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   addi sp, sp, 0x10
;   ret

function %fma_splat_f64x2(f64, f64x2, f64x2) -> f64x2 {
block0(v0: f64, v1: f64x2, v2: f64x2):
    v3 = splat.f64x2 v0
    v4 = fma v3, v1, v2
    return v4
}

; VCode:
;   add sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
; block0:
;   vle8.v v2,16(fp) #avl=16, #vtype=(e8, m1, ta, ma)
;   vle8.v v6,32(fp) #avl=16, #vtype=(e8, m1, ta, ma)
;   vfmacc.vf v6,v2,fa0 #avl=2, #vtype=(e64, m1, ta, ma)
;   vse8.v v6,0(a0) #avl=16, #vtype=(e8, m1, ta, ma)
;   ld ra,8(sp)
;   ld fp,0(sp)
;   add sp,+16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi sp, sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   ori s0, sp, 0
; block1: ; offset 0x10
;   .byte 0x57, 0x70, 0x08, 0xcc
;   addi t6, s0, 0x10
;   .byte 0x07, 0x81, 0x0f, 0x02
;   addi t6, s0, 0x20
;   .byte 0x07, 0x83, 0x0f, 0x02
;   .byte 0x57, 0x70, 0x81, 0xcd
;   .byte 0x57, 0x53, 0x25, 0xb2
;   .byte 0x57, 0x70, 0x08, 0xcc
;   .byte 0x27, 0x03, 0x05, 0x02
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   addi sp, sp, 0x10
;   ret

function %fma_neg_add_f64x2(f64x2, f64x2, f64x2) -> f64x2 {
block0(v0: f64x2, v1: f64x2, v2: f64x2):
    v3 = fneg v2
    v4 = fma v0, v1, v3
    return v4
}

; VCode:
;   add sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
; block0:
;   vle8.v v1,16(fp) #avl=16, #vtype=(e8, m1, ta, ma)
;   vle8.v v3,32(fp) #avl=16, #vtype=(e8, m1, ta, ma)
;   vle8.v v7,48(fp) #avl=16, #vtype=(e8, m1, ta, ma)
;   vfmsac.vv v7,v3,v1 #avl=2, #vtype=(e64, m1, ta, ma)
;   vse8.v v7,0(a0) #avl=16, #vtype=(e8, m1, ta, ma)
;   ld ra,8(sp)
;   ld fp,0(sp)
;   add sp,+16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi sp, sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   ori s0, sp, 0
; block1: ; offset 0x10
;   .byte 0x57, 0x70, 0x08, 0xcc
;   addi t6, s0, 0x10
;   .byte 0x87, 0x80, 0x0f, 0x02
;   addi t6, s0, 0x20
;   .byte 0x87, 0x81, 0x0f, 0x02
;   addi t6, s0, 0x30
;   .byte 0x87, 0x83, 0x0f, 0x02
;   .byte 0x57, 0x70, 0x81, 0xcd
;   .byte 0xd7, 0x93, 0x30, 0xba
;   .byte 0x57, 0x70, 0x08, 0xcc
;   .byte 0xa7, 0x03, 0x05, 0x02
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   addi sp, sp, 0x10
;   ret

function %fma_neg_add_splat_f64x2(f64, f64x2, f64x2) -> f64x2 {
block0(v0: f64, v1: f64x2, v2: f64x2):
    v3 = splat.f64x2 v0
    v4 = fneg v2
    v5 = fma v3, v1, v4
    return v5
}

; VCode:
;   add sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
; block0:
;   vle8.v v2,16(fp) #avl=16, #vtype=(e8, m1, ta, ma)
;   vle8.v v6,32(fp) #avl=16, #vtype=(e8, m1, ta, ma)
;   vfmsac.vf v6,v2,fa0 #avl=2, #vtype=(e64, m1, ta, ma)
;   vse8.v v6,0(a0) #avl=16, #vtype=(e8, m1, ta, ma)
;   ld ra,8(sp)
;   ld fp,0(sp)
;   add sp,+16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi sp, sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   ori s0, sp, 0
; block1: ; offset 0x10
;   .byte 0x57, 0x70, 0x08, 0xcc
;   addi t6, s0, 0x10
;   .byte 0x07, 0x81, 0x0f, 0x02
;   addi t6, s0, 0x20
;   .byte 0x07, 0x83, 0x0f, 0x02
;   .byte 0x57, 0x70, 0x81, 0xcd
;   .byte 0x57, 0x53, 0x25, 0xba
;   .byte 0x57, 0x70, 0x08, 0xcc
;   .byte 0x27, 0x03, 0x05, 0x02
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   addi sp, sp, 0x10
;   ret

function %fma_neg_add_neg_mul_f64x2(f64x2, f64x2, f64x2) -> f64x2 {
block0(v0: f64x2, v1: f64x2, v2: f64x2):
    v3 = fneg v2
    v4 = fneg v0
    v5 = fma v4, v1, v3
    return v5
}

; VCode:
;   add sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
; block0:
;   vle8.v v1,16(fp) #avl=16, #vtype=(e8, m1, ta, ma)
;   vle8.v v3,32(fp) #avl=16, #vtype=(e8, m1, ta, ma)
;   vle8.v v7,48(fp) #avl=16, #vtype=(e8, m1, ta, ma)
;   vfnmacc.vv v7,v3,v1 #avl=2, #vtype=(e64, m1, ta, ma)
;   vse8.v v7,0(a0) #avl=16, #vtype=(e8, m1, ta, ma)
;   ld ra,8(sp)
;   ld fp,0(sp)
;   add sp,+16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi sp, sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   ori s0, sp, 0
; block1: ; offset 0x10
;   .byte 0x57, 0x70, 0x08, 0xcc
;   addi t6, s0, 0x10
;   .byte 0x87, 0x80, 0x0f, 0x02
;   addi t6, s0, 0x20
;   .byte 0x87, 0x81, 0x0f, 0x02
;   addi t6, s0, 0x30
;   .byte 0x87, 0x83, 0x0f, 0x02
;   .byte 0x57, 0x70, 0x81, 0xcd
;   .byte 0xd7, 0x93, 0x30, 0xb6
;   .byte 0x57, 0x70, 0x08, 0xcc
;   .byte 0xa7, 0x03, 0x05, 0x02
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   addi sp, sp, 0x10
;   ret

function %fma_neg_add_neg_mul_splat_f64x2(f64, f64x2, f64x2) -> f64x2 {
block0(v0: f64, v1: f64x2, v2: f64x2):
    v3 = splat.f64x2 v0
    v4 = fneg v3
    v5 = fneg v2
    v6 = fma v4, v1, v5
    return v6
}

; VCode:
;   add sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
; block0:
;   vle8.v v2,16(fp) #avl=16, #vtype=(e8, m1, ta, ma)
;   vle8.v v6,32(fp) #avl=16, #vtype=(e8, m1, ta, ma)
;   vfnmacc.vf v6,v2,fa0 #avl=2, #vtype=(e64, m1, ta, ma)
;   vse8.v v6,0(a0) #avl=16, #vtype=(e8, m1, ta, ma)
;   ld ra,8(sp)
;   ld fp,0(sp)
;   add sp,+16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi sp, sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   ori s0, sp, 0
; block1: ; offset 0x10
;   .byte 0x57, 0x70, 0x08, 0xcc
;   addi t6, s0, 0x10
;   .byte 0x07, 0x81, 0x0f, 0x02
;   addi t6, s0, 0x20
;   .byte 0x07, 0x83, 0x0f, 0x02
;   .byte 0x57, 0x70, 0x81, 0xcd
;   .byte 0x57, 0x53, 0x25, 0xb6
;   .byte 0x57, 0x70, 0x08, 0xcc
;   .byte 0x27, 0x03, 0x05, 0x02
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   addi sp, sp, 0x10
;   ret

function %fma_neg_mul_f64x2(f64x2, f64x2, f64x2) -> f64x2 {
block0(v0: f64x2, v1: f64x2, v2: f64x2):
    v4 = fneg v0
    v5 = fma v4, v1, v2
    return v5
}

; VCode:
;   add sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
; block0:
;   vle8.v v1,16(fp) #avl=16, #vtype=(e8, m1, ta, ma)
;   vle8.v v3,32(fp) #avl=16, #vtype=(e8, m1, ta, ma)
;   vle8.v v7,48(fp) #avl=16, #vtype=(e8, m1, ta, ma)
;   vfnmsac.vv v7,v3,v1 #avl=2, #vtype=(e64, m1, ta, ma)
;   vse8.v v7,0(a0) #avl=16, #vtype=(e8, m1, ta, ma)
;   ld ra,8(sp)
;   ld fp,0(sp)
;   add sp,+16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi sp, sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   ori s0, sp, 0
; block1: ; offset 0x10
;   .byte 0x57, 0x70, 0x08, 0xcc
;   addi t6, s0, 0x10
;   .byte 0x87, 0x80, 0x0f, 0x02
;   addi t6, s0, 0x20
;   .byte 0x87, 0x81, 0x0f, 0x02
;   addi t6, s0, 0x30
;   .byte 0x87, 0x83, 0x0f, 0x02
;   .byte 0x57, 0x70, 0x81, 0xcd
;   .byte 0xd7, 0x93, 0x30, 0xbe
;   .byte 0x57, 0x70, 0x08, 0xcc
;   .byte 0xa7, 0x03, 0x05, 0x02
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   addi sp, sp, 0x10
;   ret

function %fma_neg_add_neg_mul_splat_f64x2(f64, f64x2, f64x2) -> f64x2 {
block0(v0: f64, v1: f64x2, v2: f64x2):
    v3 = splat.f64x2 v0
    v4 = fneg v3
    v6 = fma v4, v1, v2
    return v6
}

; VCode:
;   add sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
; block0:
;   vle8.v v2,16(fp) #avl=16, #vtype=(e8, m1, ta, ma)
;   vle8.v v6,32(fp) #avl=16, #vtype=(e8, m1, ta, ma)
;   vfnmsac.vf v6,v2,fa0 #avl=2, #vtype=(e64, m1, ta, ma)
;   vse8.v v6,0(a0) #avl=16, #vtype=(e8, m1, ta, ma)
;   ld ra,8(sp)
;   ld fp,0(sp)
;   add sp,+16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi sp, sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   ori s0, sp, 0
; block1: ; offset 0x10
;   .byte 0x57, 0x70, 0x08, 0xcc
;   addi t6, s0, 0x10
;   .byte 0x07, 0x81, 0x0f, 0x02
;   addi t6, s0, 0x20
;   .byte 0x07, 0x83, 0x0f, 0x02
;   .byte 0x57, 0x70, 0x81, 0xcd
;   .byte 0x57, 0x53, 0x25, 0xbe
;   .byte 0x57, 0x70, 0x08, 0xcc
;   .byte 0x27, 0x03, 0x05, 0x02
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   addi sp, sp, 0x10
;   ret

